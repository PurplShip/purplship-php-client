<?php
/**
 * Shipment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Purplship
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Purplship Open Source Multi-carrier Shipping API
 *
 * Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services  The **proxy** endpoints are stateless and forwards calls to carriers web services.
 *
 * OpenAPI spec version: v1-2020.9.0
 * Contact: hello@purplship.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Purplship\Model;

use \ArrayAccess;
use \Purplship\ObjectSerializer;

/**
 * Shipment Class Doc Comment
 *
 * @category Class
 * @description The submitted shipment&#x27;s summary
 * @package  Purplship
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Shipment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Shipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'status' => 'string',
'carrier_name' => 'string',
'carrier_id' => 'string',
'label' => 'string',
'tracking_number' => 'string',
'selected_rate' => '\Purplship\Model\Rate',
'selected_rate_id' => 'string',
'rates' => '\Purplship\Model\Rate[]',
'tracking_url' => 'string',
'shipper' => '\Purplship\Model\Address',
'recipient' => '\Purplship\Model\Address',
'parcels' => '\Purplship\Model\Parcel[]',
'services' => 'string[]',
'options' => 'object',
'payment' => '\Purplship\Model\Payment',
'customs' => '\Purplship\Model\Customs',
'doc_images' => '\Purplship\Model\Doc[]',
'reference' => 'string',
'carrier_ids' => 'string[]',
'meta' => 'object'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'status' => null,
'carrier_name' => null,
'carrier_id' => null,
'label' => null,
'tracking_number' => null,
'selected_rate' => null,
'selected_rate_id' => null,
'rates' => null,
'tracking_url' => 'uri',
'shipper' => null,
'recipient' => null,
'parcels' => null,
'services' => null,
'options' => null,
'payment' => null,
'customs' => null,
'doc_images' => null,
'reference' => null,
'carrier_ids' => null,
'meta' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'status' => 'status',
'carrier_name' => 'carrierName',
'carrier_id' => 'carrierId',
'label' => 'label',
'tracking_number' => 'trackingNumber',
'selected_rate' => 'selectedRate',
'selected_rate_id' => 'selectedRateId',
'rates' => 'rates',
'tracking_url' => 'trackingUrl',
'shipper' => 'shipper',
'recipient' => 'recipient',
'parcels' => 'parcels',
'services' => 'services',
'options' => 'options',
'payment' => 'payment',
'customs' => 'customs',
'doc_images' => 'docImages',
'reference' => 'reference',
'carrier_ids' => 'carrierIds',
'meta' => 'meta'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'status' => 'setStatus',
'carrier_name' => 'setCarrierName',
'carrier_id' => 'setCarrierId',
'label' => 'setLabel',
'tracking_number' => 'setTrackingNumber',
'selected_rate' => 'setSelectedRate',
'selected_rate_id' => 'setSelectedRateId',
'rates' => 'setRates',
'tracking_url' => 'setTrackingUrl',
'shipper' => 'setShipper',
'recipient' => 'setRecipient',
'parcels' => 'setParcels',
'services' => 'setServices',
'options' => 'setOptions',
'payment' => 'setPayment',
'customs' => 'setCustoms',
'doc_images' => 'setDocImages',
'reference' => 'setReference',
'carrier_ids' => 'setCarrierIds',
'meta' => 'setMeta'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'status' => 'getStatus',
'carrier_name' => 'getCarrierName',
'carrier_id' => 'getCarrierId',
'label' => 'getLabel',
'tracking_number' => 'getTrackingNumber',
'selected_rate' => 'getSelectedRate',
'selected_rate_id' => 'getSelectedRateId',
'rates' => 'getRates',
'tracking_url' => 'getTrackingUrl',
'shipper' => 'getShipper',
'recipient' => 'getRecipient',
'parcels' => 'getParcels',
'services' => 'getServices',
'options' => 'getOptions',
'payment' => 'getPayment',
'customs' => 'getCustoms',
'doc_images' => 'getDocImages',
'reference' => 'getReference',
'carrier_ids' => 'getCarrierIds',
'meta' => 'getMeta'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_CREATED = 'created';
const STATUS_CANCELLED = 'cancelled';
const STATUS_PURCHASED = 'purchased';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CREATED,
self::STATUS_CANCELLED,
self::STATUS_PURCHASED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : 'created';
        $this->container['carrier_name'] = isset($data['carrier_name']) ? $data['carrier_name'] : null;
        $this->container['carrier_id'] = isset($data['carrier_id']) ? $data['carrier_id'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['selected_rate'] = isset($data['selected_rate']) ? $data['selected_rate'] : null;
        $this->container['selected_rate_id'] = isset($data['selected_rate_id']) ? $data['selected_rate_id'] : null;
        $this->container['rates'] = isset($data['rates']) ? $data['rates'] : null;
        $this->container['tracking_url'] = isset($data['tracking_url']) ? $data['tracking_url'] : null;
        $this->container['shipper'] = isset($data['shipper']) ? $data['shipper'] : null;
        $this->container['recipient'] = isset($data['recipient']) ? $data['recipient'] : null;
        $this->container['parcels'] = isset($data['parcels']) ? $data['parcels'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['payment'] = isset($data['payment']) ? $data['payment'] : null;
        $this->container['customs'] = isset($data['customs']) ? $data['customs'] : null;
        $this->container['doc_images'] = isset($data['doc_images']) ? $data['doc_images'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['carrier_ids'] = isset($data['carrier_ids']) ? $data['carrier_ids'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['shipper'] === null) {
            $invalidProperties[] = "'shipper' can't be null";
        }
        if ($this->container['recipient'] === null) {
            $invalidProperties[] = "'recipient' can't be null";
        }
        if ($this->container['parcels'] === null) {
            $invalidProperties[] = "'parcels' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current Shipment status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets carrier_name
     *
     * @return string
     */
    public function getCarrierName()
    {
        return $this->container['carrier_name'];
    }

    /**
     * Sets carrier_name
     *
     * @param string $carrier_name The shipment carrier
     *
     * @return $this
     */
    public function setCarrierName($carrier_name)
    {
        $this->container['carrier_name'] = $carrier_name;

        return $this;
    }

    /**
     * Gets carrier_id
     *
     * @return string
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param string $carrier_id The shipment carrier configured identifier
     *
     * @return $this
     */
    public function setCarrierId($carrier_id)
    {
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label The shipment label in base64 string
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string $tracking_number The shipment tracking number
     *
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets selected_rate
     *
     * @return \Purplship\Model\Rate
     */
    public function getSelectedRate()
    {
        return $this->container['selected_rate'];
    }

    /**
     * Sets selected_rate
     *
     * @param \Purplship\Model\Rate $selected_rate selected_rate
     *
     * @return $this
     */
    public function setSelectedRate($selected_rate)
    {
        $this->container['selected_rate'] = $selected_rate;

        return $this;
    }

    /**
     * Gets selected_rate_id
     *
     * @return string
     */
    public function getSelectedRateId()
    {
        return $this->container['selected_rate_id'];
    }

    /**
     * Sets selected_rate_id
     *
     * @param string $selected_rate_id The shipment selected rate.
     *
     * @return $this
     */
    public function setSelectedRateId($selected_rate_id)
    {
        $this->container['selected_rate_id'] = $selected_rate_id;

        return $this;
    }

    /**
     * Gets rates
     *
     * @return \Purplship\Model\Rate[]
     */
    public function getRates()
    {
        return $this->container['rates'];
    }

    /**
     * Sets rates
     *
     * @param \Purplship\Model\Rate[] $rates The list for shipment rates fetched previously
     *
     * @return $this
     */
    public function setRates($rates)
    {
        $this->container['rates'] = $rates;

        return $this;
    }

    /**
     * Gets tracking_url
     *
     * @return string
     */
    public function getTrackingUrl()
    {
        return $this->container['tracking_url'];
    }

    /**
     * Sets tracking_url
     *
     * @param string $tracking_url The shipment tracking url
     *
     * @return $this
     */
    public function setTrackingUrl($tracking_url)
    {
        $this->container['tracking_url'] = $tracking_url;

        return $this;
    }

    /**
     * Gets shipper
     *
     * @return \Purplship\Model\Address
     */
    public function getShipper()
    {
        return $this->container['shipper'];
    }

    /**
     * Sets shipper
     *
     * @param \Purplship\Model\Address $shipper shipper
     *
     * @return $this
     */
    public function setShipper($shipper)
    {
        $this->container['shipper'] = $shipper;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return \Purplship\Model\Address
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param \Purplship\Model\Address $recipient recipient
     *
     * @return $this
     */
    public function setRecipient($recipient)
    {
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets parcels
     *
     * @return \Purplship\Model\Parcel[]
     */
    public function getParcels()
    {
        return $this->container['parcels'];
    }

    /**
     * Sets parcels
     *
     * @param \Purplship\Model\Parcel[] $parcels The shipment's parcels
     *
     * @return $this
     */
    public function setParcels($parcels)
    {
        $this->container['parcels'] = $parcels;

        return $this;
    }

    /**
     * Gets services
     *
     * @return string[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param string[] $services The requested carrier service for the shipment.  Please consult [the reference](#operation/all_references) for specific carriers services.<br/> Note that this is a list because on a Multi-carrier rate request you could specify a service per carrier.
     *
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets options
     *
     * @return object
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param object $options The options available for the shipment.<br/> Please consult [the reference](#operation/all_references) for additional specific carriers options.
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \Purplship\Model\Payment
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \Purplship\Model\Payment $payment payment
     *
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets customs
     *
     * @return \Purplship\Model\Customs
     */
    public function getCustoms()
    {
        return $this->container['customs'];
    }

    /**
     * Sets customs
     *
     * @param \Purplship\Model\Customs $customs customs
     *
     * @return $this
     */
    public function setCustoms($customs)
    {
        $this->container['customs'] = $customs;

        return $this;
    }

    /**
     * Gets doc_images
     *
     * @return \Purplship\Model\Doc[]
     */
    public function getDocImages()
    {
        return $this->container['doc_images'];
    }

    /**
     * Sets doc_images
     *
     * @param \Purplship\Model\Doc[] $doc_images The list of documents to attach for a paperless interantional trade.  eg: Invoices...
     *
     * @return $this
     */
    public function setDocImages($doc_images)
    {
        $this->container['doc_images'] = $doc_images;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The shipment reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets carrier_ids
     *
     * @return string[]
     */
    public function getCarrierIds()
    {
        return $this->container['carrier_ids'];
    }

    /**
     * Sets carrier_ids
     *
     * @param string[] $carrier_ids The list of configured carriers you wish to get rates from.  *Note that the request will be sent to all carriers in nothing is specified*
     *
     * @return $this
     */
    public function setCarrierIds($carrier_ids)
    {
        $this->container['carrier_ids'] = $carrier_ids;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return object
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param object $meta provider specific metadata
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
