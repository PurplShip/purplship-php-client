<?php
/**
 * Customs
 *
 * PHP version 5
 *
 * @category Class
 * @package  PurplShip
 * @author   PurplShip Codegen team
 * @link     https://github.com/purplship/purplship-clients
 */

/**
 * PurplShip Multi-carrier API
 *
 * PurplShip is a Multi-carrier Shipping API that simplifies the integration of logistic carrier services
 *
 * OpenAPI spec version: v1
 * Contact: hello@purplship.com
 * Generated by: https://github.com/purplship/purplship-clients.git
 * PurplShip Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/purplship/purplship-clients
 * Do not edit the class manually.
 */

namespace PurplShip\Model;

use \ArrayAccess;
use \PurplShip\ObjectSerializer;

/**
 * Customs Class Doc Comment
 *
 * @category Class
 * @description The customs details.&lt;br/&gt; Note that this is required for the shipment of an international Dutiable parcel.
 * @package  PurplShip
 * @author   PurplShip Codegen team
 * @link     https://github.com/purplship/purplship-clients
 */
class Customs implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Customs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'no_eei' => 'string',
        'aes' => 'string',
        'description' => 'string',
        'terms_of_trade' => 'string',
        'commodities' => '\PurplShip\Model\Commodity[]',
        'duty' => '\PurplShip\Model\Payment',
        'invoice' => '\PurplShip\Model\Invoice',
        'commercial_invoice' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'no_eei' => null,
        'aes' => null,
        'description' => null,
        'terms_of_trade' => null,
        'commodities' => null,
        'duty' => null,
        'invoice' => null,
        'commercial_invoice' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'no_eei' => 'noEei',
        'aes' => 'aes',
        'description' => 'description',
        'terms_of_trade' => 'termsOfTrade',
        'commodities' => 'commodities',
        'duty' => 'duty',
        'invoice' => 'invoice',
        'commercial_invoice' => 'commercialInvoice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'no_eei' => 'setNoEei',
        'aes' => 'setAes',
        'description' => 'setDescription',
        'terms_of_trade' => 'setTermsOfTrade',
        'commodities' => 'setCommodities',
        'duty' => 'setDuty',
        'invoice' => 'setInvoice',
        'commercial_invoice' => 'setCommercialInvoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'no_eei' => 'getNoEei',
        'aes' => 'getAes',
        'description' => 'getDescription',
        'terms_of_trade' => 'getTermsOfTrade',
        'commodities' => 'getCommodities',
        'duty' => 'getDuty',
        'invoice' => 'getInvoice',
        'commercial_invoice' => 'getCommercialInvoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['no_eei'] = isset($data['no_eei']) ? $data['no_eei'] : null;
        $this->container['aes'] = isset($data['aes']) ? $data['aes'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['terms_of_trade'] = isset($data['terms_of_trade']) ? $data['terms_of_trade'] : null;
        $this->container['commodities'] = isset($data['commodities']) ? $data['commodities'] : null;
        $this->container['duty'] = isset($data['duty']) ? $data['duty'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['commercial_invoice'] = isset($data['commercial_invoice']) ? $data['commercial_invoice'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['no_eei']) && (mb_strlen($this->container['no_eei']) < 1)) {
            $invalidProperties[] = "invalid value for 'no_eei', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['aes']) && (mb_strlen($this->container['aes']) < 1)) {
            $invalidProperties[] = "invalid value for 'aes', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['terms_of_trade']) && (mb_strlen($this->container['terms_of_trade']) < 1)) {
            $invalidProperties[] = "invalid value for 'terms_of_trade', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets no_eei
     *
     * @return string
     */
    public function getNoEei()
    {
        return $this->container['no_eei'];
    }

    /**
     * Sets no_eei
     *
     * @param string $no_eei no_eei
     *
     * @return $this
     */
    public function setNoEei($no_eei)
    {

        if (!is_null($no_eei) && (mb_strlen($no_eei) < 1)) {
            throw new \InvalidArgumentException('invalid length for $no_eei when calling Customs., must be bigger than or equal to 1.');
        }

        $this->container['no_eei'] = $no_eei;

        return $this;
    }

    /**
     * Gets aes
     *
     * @return string
     */
    public function getAes()
    {
        return $this->container['aes'];
    }

    /**
     * Sets aes
     *
     * @param string $aes aes
     *
     * @return $this
     */
    public function setAes($aes)
    {

        if (!is_null($aes) && (mb_strlen($aes) < 1)) {
            throw new \InvalidArgumentException('invalid length for $aes when calling Customs., must be bigger than or equal to 1.');
        }

        $this->container['aes'] = $aes;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {

        if (!is_null($description) && (mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Customs., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets terms_of_trade
     *
     * @return string
     */
    public function getTermsOfTrade()
    {
        return $this->container['terms_of_trade'];
    }

    /**
     * Sets terms_of_trade
     *
     * @param string $terms_of_trade The customs 'term of trade' also known as 'incoterm'
     *
     * @return $this
     */
    public function setTermsOfTrade($terms_of_trade)
    {

        if (!is_null($terms_of_trade) && (mb_strlen($terms_of_trade) < 1)) {
            throw new \InvalidArgumentException('invalid length for $terms_of_trade when calling Customs., must be bigger than or equal to 1.');
        }

        $this->container['terms_of_trade'] = $terms_of_trade;

        return $this;
    }

    /**
     * Gets commodities
     *
     * @return \PurplShip\Model\Commodity[]
     */
    public function getCommodities()
    {
        return $this->container['commodities'];
    }

    /**
     * Sets commodities
     *
     * @param \PurplShip\Model\Commodity[] $commodities The parcel content items
     *
     * @return $this
     */
    public function setCommodities($commodities)
    {
        $this->container['commodities'] = $commodities;

        return $this;
    }

    /**
     * Gets duty
     *
     * @return \PurplShip\Model\Payment
     */
    public function getDuty()
    {
        return $this->container['duty'];
    }

    /**
     * Sets duty
     *
     * @param \PurplShip\Model\Payment $duty duty
     *
     * @return $this
     */
    public function setDuty($duty)
    {
        $this->container['duty'] = $duty;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \PurplShip\Model\Invoice
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \PurplShip\Model\Invoice $invoice invoice
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets commercial_invoice
     *
     * @return bool
     */
    public function getCommercialInvoice()
    {
        return $this->container['commercial_invoice'];
    }

    /**
     * Sets commercial_invoice
     *
     * @param bool $commercial_invoice Indicates if the shipment is commercial
     *
     * @return $this
     */
    public function setCommercialInvoice($commercial_invoice)
    {
        $this->container['commercial_invoice'] = $commercial_invoice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


